import { BackendAppMidLevelApi } from './backendAppMidLevelApi.js';
import { getRevDateText } from './utils.js'

export class TextMessage {
  telegramUserId = null;
  text = null;
  isHtml = true;
  isDisablePreview = true;
  isSilent = false;
  constructor(telegramUserId, text) {
    this.telegramUserId = telegramUserId;
    this.text = text;
  }
}

export class BackendAppHighLevelApi {
  midLevelApi = new BackendAppMidLevelApi();

  async start() {
    await this.midLevelApi.start();
  }

  async stop() {
    await this.midLevelApi.stop();
  }

  async kill() {
    await this.midLevelApi.kill();
  }
  
  // utils

  async parseWildcard(telegramUserId, params) {
    const wildcard = params[0];
    const telegramUserEntry = await this.midLevelApi.lowLevelApi.getTelegramUser(telegramUserId);
    const watchList = telegramUserEntry.watchList;
    let filteredWatchList;
    if (wildcard === '*' ) {
      filteredWatchList = watchList;
    } else if (wildcard === '+') {
      filteredWatchList = watchList.filter((watchEntity) => {
        return watchEntity.isFavorite;
      });
    } else if (wildcard === '!') {
      filteredWatchList = watchList.filter((watchEntity) => {
        return watchEntity.hasDiff;
      });
    } else {
      return params;
    }
    return filteredWatchList.map((watchEntity) => '#' + (watchEntity.internalIdx + 1))
  }

  getSmartShortNameText(watchEntity) {
    const isJuridistic = !!watchEntity.reference['–°–≤–Æ–õ']; 
    let shortNameText;
    if (isJuridistic) {
      if (watchEntity.reference['–°–≤–Æ–õ']['–°–≤–ù–∞–∏–º–Æ–õ']['–°–≤–ù–∞–∏–º–Æ–õ–°–æ–∫—Ä']) {
        shortNameText = watchEntity.reference['–°–≤–Æ–õ']['–°–≤–ù–∞–∏–º–Æ–õ']['–°–≤–ù–∞–∏–º–Æ–õ–°–æ–∫—Ä']['@attributes']['–ù–∞–∏–º–°–æ–∫—Ä'];

      } else {
        shortNameText = watchEntity.reference['–°–≤–Æ–õ']['–°–≤–ù–∞–∏–º–Æ–õ']['@attributes']['–ù–∞–∏–º–Æ–õ–°–æ–∫—Ä'];

      }
    } else {
      shortNameText = '–ò–ü ' + watchEntity.reference['–°–≤–ò–ü']['–°–≤–§–õ']['–§–ò–û–†—É—Å']['@attributes']['–§–∞–º–∏–ª–∏—è'];
    }
    return shortNameText;
  }

  getSmartInnText(watchEntity) {
    const isJuridistic = !!watchEntity.reference['–°–≤–Æ–õ']; 
    let innText;
    if (isJuridistic) {      
      innText = watchEntity.reference['–°–≤–Æ–õ']['@attributes']['–ò–ù–ù'];
    } else {
      innText = watchEntity.reference['–°–≤–ò–ü']['@attributes']['–ò–ù–ù–§–õ'];
    }
    return innText;
  }

  getSmartNameText(watchEntity) {
    let shortNameText = this.getSmartShortNameText(watchEntity);
    let innText = this.getSmartInnText(watchEntity);
    const text = `${shortNameText} –ò–ù–ù: ${innText}`;
    return text;
  }

  getSmartTimestampDateText(watchEntity) {
    const dateText = watchEntity.reference['@attributes']['–î–∞—Ç–∞–í—ã–≥'];
    return dateText;
  } 

  getChangesRevDateText(watchEntity) {
    if (watchEntity.candidateFetchedDate) {
      const revDateText = getRevDateText(new Date(watchEntity.candidateFetchedDate));
      return revDateText;
    } else {
      const revDateText = getRevDateText(new Date(watchEntity.referenceFetchedDate));
      return revDateText;
    }
  }
  
  getDiffText(diff) {
    let text = '';
    if (diff) {
      diff.removed.forEach(element => {
        text += `<b>–£–î–õ:</b> ${element[0].replace('@attributes.', '<b>').replaceAll('.', ' ‚Ä¢ ')}</b>  \n`;
        text += `‚ûñ ${element[1]}  \n`;
        text += `\n`;
      });
      diff.added.forEach(element => {
        text += `<b>–î–û–ë:</b> ${element[0].replace('@attributes.', '<b>').replaceAll('.', ' ‚Ä¢ ')}</b>  \n`;
        text += `‚ûï ${element[1]}  \n`;
        text += `\n`;
      });
      diff.edited.forEach(element => {
        text += `<b>–ò–ó–ú:</b> ${element[0].replace('@attributes.', '<b>').replaceAll('.', ' ‚Ä¢ ')}</b>  \n`;
        text += `‚ûñ ${element[1]}  \n`;
        text += `‚ûï ${element[2]}  \n`;      
        text += `\n`;
      });
    }
    return text;
  }

  getStatusIconText(status) {
    switch (status) {
      case 'same':
        return '‚ö™Ô∏è';        
    
      case 'differs':
        return 'üî¥';

      case 'new':
        return 'üîµ';

      case 'approved':
        return 'üü¢';

      default:
        return 'üü£';
    }
  }
      
  // high-level api

  async getWatchList(telegramUserId) {
    const telegramUser = await this.midLevelApi.lowLevelApi.getTelegramUser(telegramUserId);
    const watchList = telegramUser.watchList;
    let text = '';
    const watchListValues = Object.values(watchList);
    if (watchListValues.length > 0 ) {
      watchListValues.forEach((watchEntity, index) => {
        const smartName = this.getSmartNameText(watchEntity);
        const status = watchEntity.status === 'differs' ? '–ò–ó–ú–ï–ù–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´' : watchEntity.status === 'same' ? '–Ω–µ—Ç –∏–∑–º.' : watchEntity.status === 'new' ? '–≤–ø–µ—Ä–≤—ã–µ' : watchEntity.status === 'approved' ? '–ø—Ä–∏–Ω.' : watchEntity.status;
        const statusIconText = this.getStatusIconText(watchEntity.status); 
        const favoriteIconText = watchEntity.isFavorite ? ' ‚≠ê' : ''; 
        const candidateRevDateText = this.getChangesRevDateText(watchEntity);
        if (watchEntity.hasDiff) {
          text += '<b>';  
        }
        text += `${index + 1}. ${statusIconText}${favoriteIconText} ${smartName}\n`;
        text += `     2022-12-14 (<i>${status} ${candidateRevDateText}</i>)\n\n`;
        if (watchEntity.hasDiff) {
          text += '</b>';  
        }
      });
    } else {
      text = '–í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–º–∞–Ω–¥—ã /add –∏ –¥–∞–ª–µ–µ –ò–ù–ù, –ù–∞–ø—Ä–∏–º–µ—Ä: /add 7737117010'
    }
    return [ new TextMessage(telegramUserId, text.trim()) ];
  }

  async getInfo(telegramUserId, watchEntityKey) {
    const watchEntity = await this.midLevelApi.getWatchEntity(telegramUserId, watchEntityKey);
    if (watchEntity) {
      const statusIconText = this.getStatusIconText(watchEntity.status);
      const favoriteIconText = watchEntity.isFavorite ? ' ‚≠ê' : ''; 
      const smartNameText = this.getSmartNameText(watchEntity); 
      const statusText = watchEntity.status === 'differs' ? '–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø' : watchEntity.status === 'same' ? '–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç' : watchEntity.status === 'new' ? '–≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ' : watchEntity.status === 'approved' ? '–ø—Ä–∏–Ω—è—Ç–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞' : watchEntity.status;
      const candidateRevDateText = this.getChangesRevDateText(watchEntity);
      const referenceTimestampDateText = this.getSmartTimestampDateText(watchEntity);
      const inn = this.getSmartInnText(watchEntity);
      const url1 = '<a href="https://egrul.itsoft.ru/' + inn + '">egrul.itsoft.ru</a>';
      const url2 = '<a href="https://www.rusprofile.ru/search?query=' + inn + '">rusprofile.ru</a>';
      
      let text = `<b>${statusIconText}${favoriteIconText} ${smartNameText}</b>\n–°—Ç–∞—Ç—É—Å: ${statusText}\n`;
      
      text += `–î–∞—Ç–∞ –≤—ã–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å: ${referenceTimestampDateText}\n`;
      
      if (watchEntity.status === 'differs') {
        const candidateTimestampDateText = this.getSmartTimestampDateText(watchEntity);
        text += `–î–∞—Ç–∞ –Ω–æ–≤–æ–π –≤—ã–ø–∏—Å–∫–∏: ${candidateTimestampDateText}\n`;
      }
      
      text += `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${candidateRevDateText}\n–°—Å—ã–ª–∫–∏: ${url1} | ${url2}`;
      return [ new TextMessage(telegramUserId, text.trim()) ];
    } else {
      const text = `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      return [ new TextMessage(telegramUserId, text.trim()) ];        
    }
     
  }

  async getChanges(telegramUserId, watchEntityKey) {
    const watchEntity = await this.midLevelApi.getWatchEntity(telegramUserId, watchEntityKey);
    if (watchEntity) {
      const diff = watchEntity.diff;
      const smartNameText = this.getSmartNameText(watchEntity); 
      const statusText = watchEntity.status === 'differs' ? '–û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–õ–ï–î–£–Æ–©–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø' : watchEntity.status === 'same' ? '–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç' : watchEntity.status === 'new' ? '–≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ' : watchEntity.status === 'approved' ? '–ø—Ä–∏–Ω—è—Ç–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞' : watchEntity.status;
      const statusIconText = this.getStatusIconText(watchEntity.status);
      const favoriteIconText = watchEntity.isFavorite ? ' ‚≠ê' : ''; 
      const candidateRevDateText = this.getChangesRevDateText(watchEntity);
      const diffText = this.getDiffText(diff);
        
      const text = `${statusIconText}${favoriteIconText} ${smartNameText}\n${statusText} ${candidateRevDateText}\n\n${diffText}`;
      return [ new TextMessage(telegramUserId, text.trim()) ];
    } else {
      const text = `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      return [ new TextMessage(telegramUserId, text.trim()) ];        
    }
  }
 
  async addToWatchList(telegramUserId, watchEntityKey) {
    const isAdded = await this.midLevelApi.addToWatchList(telegramUserId, watchEntityKey);
    if (isAdded) {
      return [ new TextMessage(telegramUserId, `üîµ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á ${watchEntityKey}`) ];
    } else {
      return [ new TextMessage(telegramUserId, `–∫–ª—é—á ${watchEntityKey} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ —ç—Ç–æ–≥–æ`) ];  
    }
  }

  async removeFromWatchList(telegramUserId, watchEntityKey) {
    const isRemoved = await this.midLevelApi.removeFromWatchList(telegramUserId, watchEntityKey);
    if (isRemoved) {
      return [ new TextMessage(telegramUserId, `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É ${watchEntityKey} —É–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è`) ];    
    } else {
      return [ new TextMessage(telegramUserId, `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É ${watchEntityKey} —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –µ–µ —Ç–∞–º –∏ –Ω–µ –±—ã–ª–æ`) ];
    }
  }

  async updateCandidateInWatchList(telegramUserId, watchEntityKey) {
    const status = await this.midLevelApi.updateCandidateInWatchList(telegramUserId, watchEntityKey);
    if (status) {
    const statusIconText = this.getStatusIconText(status);         
      return [ new TextMessage(telegramUserId, `–í—ã–ø–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. ${statusIconText} ${status === 'same' ? '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç' : '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}`) ];
    } else {
      const text = `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      return [ new TextMessage(telegramUserId, text.trim()) ];        
    }
  }

  async approveCandidateToReferenceInWatchList(telegramUserId, watchEntityKey) {
    const isApproved = await this.midLevelApi.approveCandidateToReferenceInWatchList(telegramUserId, watchEntityKey);
    if (isApproved === true) {
      return [ new TextMessage(telegramUserId, `üü¢ –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –≤—ã–ø–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É ${watchEntityKey} —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—è—Ç–∞ –∑–∞ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å`) ];
    } else if (isApproved === false) {
      return [ new TextMessage(telegramUserId, `‚ö™Ô∏è –í –≤—ã–ø–∏—Å–∫–µ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–π, –ø–æ-—ç—Ç–æ–º—É –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ`) ];
    } else {
      return [ new TextMessage(telegramUserId, `üü§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`) ];        
    }
  }
  
  async addToFavorite(telegramUserId, watchEntityKey) {
    const status = await this.midLevelApi.setIsFavorite(telegramUserId, watchEntityKey, true);
    if (status) {
      return [ new TextMessage(telegramUserId, `‚≠ê –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É ${watchEntityKey} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.`) ];
    } else {
      const text = `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      return [ new TextMessage(telegramUserId, text.trim()) ];        
    }
  }

  async removeFromFavorite(telegramUserId, watchEntityKey) {
    const status = await this.midLevelApi.setIsFavorite(telegramUserId, watchEntityKey, false);
    if (status) {
      return [ new TextMessage(telegramUserId, `üí´ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É ${watchEntityKey} —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`) ];
    } else {
      const text = `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É ${watchEntityKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      return [ new TextMessage(telegramUserId, text.trim()) ];        
    }
  }

  // auto

  async autoupdateAllCandidatesInWatchList(telegramUserId) {
    const statuses = await this.midLevelApi.updateAllCandidatesInWatchList(telegramUserId);
    const status = statuses.includes('differs') ? 'differs' : 'same' ;
    const statusIconText = this.getStatusIconText(status);
    let messageText = ''; 
    messageText += '–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –≤—ã–ø–∏—Å–∫–∏ \n';
    messageText += statusIconText;
    messageText += (status === 'differs') ? '–ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´' : '–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç';
    const messages = [ new TextMessage(telegramUserId, messageText.trim()) ];
    return messages;
  }
  
}